-- =====================================================
-- WORKFLOW MANAGEMENT SYSTEM - DATABASE SCHEMA
-- =====================================================

-- =====================================================
-- QUARTZ TABLES FOR PERSISTENT JOB SCHEDULING
-- =====================================================

-- Drop tables if they exist
DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;

-- Job Details Table
CREATE TABLE QRTZ_JOB_DETAILS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    JOB_CLASS_NAME VARCHAR(250) NOT NULL,
    IS_DURABLE BOOLEAN NOT NULL,
    IS_NONCONCURRENT BOOLEAN NOT NULL,
    IS_UPDATE_DATA BOOLEAN NOT NULL,
    REQUESTS_RECOVERY BOOLEAN NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
);

-- Triggers Table
CREATE TABLE QRTZ_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT NULL,
    PREV_FIRE_TIME BIGINT NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT NULL,
    CALENDAR_NAME VARCHAR(200) NULL,
    MISFIRE_INSTR SMALLINT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME, JOB_NAME, JOB_GROUP)
);

-- Simple Triggers Table
CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

-- Cron Triggers Table
CREATE TABLE QRTZ_CRON_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

-- Blob Triggers Table
CREATE TABLE QRTZ_BLOB_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

-- Calendars Table
CREATE TABLE QRTZ_CALENDARS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    CALENDAR_NAME VARCHAR(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
);

-- Paused Trigger Groups Table
CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
);

-- Fired Triggers Table
CREATE TABLE QRTZ_FIRED_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    SCHED_TIME BIGINT NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200) NULL,
    JOB_GROUP VARCHAR(200) NULL,
    IS_NONCONCURRENT BOOLEAN NULL,
    REQUESTS_RECOVERY BOOLEAN NULL,
    PRIMARY KEY (SCHED_NAME, ENTRY_ID)
);

-- Scheduler State Table
CREATE TABLE QRTZ_SCHEDULER_STATE (
    SCHED_NAME VARCHAR(120) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
);

-- Locks Table
CREATE TABLE QRTZ_LOCKS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME VARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME, LOCK_NAME)
);

-- Insert default locks
INSERT INTO QRTZ_LOCKS VALUES('WorkflowScheduler','STATE_ACCESS');
INSERT INTO QRTZ_LOCKS VALUES('WorkflowScheduler','TRIGGER_ACCESS');
INSERT INTO QRTZ_LOCKS VALUES('WorkflowScheduler','JOB_ACCESS');
INSERT INTO QRTZ_LOCKS VALUES('WorkflowScheduler','CALENDAR_ACCESS');
INSERT INTO QRTZ_LOCKS VALUES('WorkflowScheduler','MISFIRE_ACCESS');

------------------------------------------------------------
-- SEQUENCES
------------------------------------------------------------
CREATE SEQUENCE SEQ_WORKFLOW_USER START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_ROLE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_CONFIG START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_CONFIG_ROLE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_CONFIG_TASK START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_CONFIG_TASK_FILE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_CONFIG_PARAM START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_TASK_DECISION_OUTCOME START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_CALENDAR START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_CALENDAR_DAY START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_INSTANCE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_INSTANCE_ROLE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_INSTANCE_TASK START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_INSTANCE_TASK_FILE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_WORKFLOW_INSTANCE_TASK_QUERY START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_TASK_INSTANCE_DECISION_OUTCOME START WITH 1 INCREMENT BY 1;

------------------------------------------------------------
-- REFERENCE LAYER
------------------------------------------------------------
CREATE TABLE WORKFLOW_USER (
    USER_ID            NUMBER PRIMARY KEY,
    USERNAME           VARCHAR2(100) NOT NULL UNIQUE,
    FIRST_NAME         VARCHAR2(100),
    LAST_NAME          VARCHAR2(100),
    EMAIL              VARCHAR2(255) NOT NULL,
    ESCALATION_TO      NUMBER,  -- mapped to another USER_ID
    IS_ACTIVE          CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N')),
    IS_ADMIN           CHAR(1) DEFAULT 'N' CHECK (IS_ADMIN IN ('Y','N')),
    CREATED_BY         VARCHAR2(100) NOT NULL,
    CREATED_ON         TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_BY         VARCHAR2(100),
    UPDATED_ON         TIMESTAMP,
    CONSTRAINT FK_WORKFLOW_USER_ESCALATION FOREIGN KEY (ESCALATION_TO)
        REFERENCES WORKFLOW_USER(USER_ID)
);

CREATE INDEX IDX_WORKFLOW_USER_ESCALATION ON WORKFLOW_USER(ESCALATION_TO);

CREATE TABLE WORKFLOW_ROLE (
    ROLE_ID        NUMBER PRIMARY KEY,
    ROLE_NAME      VARCHAR2(100) NOT NULL UNIQUE,
    IS_ACTIVE      CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N')),
    CREATED_BY     VARCHAR2(100) NOT NULL,
    CREATED_ON     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_BY     VARCHAR2(100),
    UPDATED_ON     TIMESTAMP
);

------------------------------------------------------------
-- CONFIGURATION LAYER
------------------------------------------------------------
CREATE TABLE WORKFLOW_CONFIG (
    WORKFLOW_ID              NUMBER PRIMARY KEY,
    NAME                     VARCHAR2(255) NOT NULL,
    DESCRIPTION              VARCHAR2(1000),
    REMINDER_BEFORE_DUE_MINS NUMBER,
    MINUTES_AFTER_DUE        NUMBER,
    ESCALATION_AFTER_MINS    NUMBER,
    DUE_IN_MINS              NUMBER,
    IS_ACTIVE                CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N')),
    CALENDAR_ID              NUMBER,  -- Reference to the assigned calendar for this workflow
    CREATED_BY               VARCHAR2(100) NOT NULL,
    CREATED_ON               TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_BY               VARCHAR2(100),
    UPDATED_ON               TIMESTAMP
);

CREATE TABLE WORKFLOW_CONFIG_ROLE (
    ID             NUMBER PRIMARY KEY,
    WORKFLOW_ID    NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG(WORKFLOW_ID) ON DELETE CASCADE,
    ROLE_ID        NUMBER NOT NULL REFERENCES WORKFLOW_ROLE(ROLE_ID),
    USER_ID        NUMBER NOT NULL REFERENCES WORKFLOW_USER(USER_ID),
    IS_ACTIVE      CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N'))
);

CREATE INDEX IDX_WORKFLOW_CONFIG_ROLE_WORKFLOW ON WORKFLOW_CONFIG_ROLE(WORKFLOW_ID);

CREATE TABLE WORKFLOW_CONFIG_TASK (
    TASK_ID             NUMBER PRIMARY KEY,
    WORKFLOW_ID         NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG(WORKFLOW_ID) ON DELETE CASCADE,
    NAME                VARCHAR2(255) NOT NULL,
    TASK_TYPE           VARCHAR2(50) CHECK (TASK_TYPE IN (
                            'FILE_UPLOAD','FILE_UPDATE','CONSOLIDATE_FILE','DECISION')),
    ROLE_ID             NUMBER REFERENCES WORKFLOW_ROLE(ROLE_ID),
    EXPECTED_COMPLETION NUMBER,
    SEQUENCE_ORDER      NUMBER NOT NULL,
    PARENT_TASK_IDS     VARCHAR2(500),  -- Comma-separated list of parent task IDs
    TASK_DESCRIPTION    VARCHAR2(1000),
    TASK_PRIORITY       VARCHAR2(20) DEFAULT 'MEDIUM',  -- LOW, MEDIUM, HIGH, CRITICAL
    AUTO_ESCALATION_ENABLED CHAR(1) DEFAULT 'Y' CHECK (AUTO_ESCALATION_ENABLED IN ('Y','N')),
    NOTIFICATION_REQUIRED CHAR(1) DEFAULT 'Y' CHECK (NOTIFICATION_REQUIRED IN ('Y','N')),
    TASK_REJECTED_AT    TIMESTAMP
);

CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_WORKFLOW ON WORKFLOW_CONFIG_TASK(WORKFLOW_ID);
CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_ROLE ON WORKFLOW_CONFIG_TASK(ROLE_ID);

CREATE TABLE WORKFLOW_CONFIG_TASK_FILE (
    FILE_ID              NUMBER PRIMARY KEY,
    TASK_ID              NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG_TASK(TASK_ID) ON DELETE CASCADE,
    FILE_NAME            VARCHAR2(500),
    FILE_PATH            VARCHAR2(1000),
    FILE_LOCATION        VARCHAR2(1000),  -- Physical storage location (e.g., S3 bucket, local directory)
    ACTION_TYPE          VARCHAR2(50) CHECK (ACTION_TYPE IN ('UPLOAD','UPDATE','CONSOLIDATE')),
    FILE_DESCRIPTION    VARCHAR2(500),
    IS_REQUIRED         CHAR(1) DEFAULT 'N' CHECK (IS_REQUIRED IN ('Y','N')),
    FILE_STATUS          VARCHAR2(50) DEFAULT 'PENDING' CHECK (FILE_STATUS IN ('PENDING','IN_PROGRESS','COMPLETED','REJECTED')),
    KEEP_FILE_VERSIONS  CHAR(1) DEFAULT 'Y' CHECK (KEEP_FILE_VERSIONS IN ('Y','N')),
    KEEP_FILE_HISTORY   CHAR(1) DEFAULT 'Y' CHECK (KEEP_FILE_HISTORY IN ('Y','N')),
    RETAIN_FOR_CURRENT_PERIOD CHAR(1) DEFAULT 'Y' CHECK (RETAIN_FOR_CURRENT_PERIOD IN ('Y','N')),
    FILE_COMMENTARY      VARCHAR2(1000),  -- Additional comments about the file
    CREATED_BY          VARCHAR2(100),
    CREATED_ON          TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_BY          VARCHAR2(100),
    UPDATED_ON          TIMESTAMP
);

CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_FILE_TASK ON WORKFLOW_CONFIG_TASK_FILE(TASK_ID);
CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_FILE_STATUS ON WORKFLOW_CONFIG_TASK_FILE(FILE_STATUS);

CREATE TABLE WORKFLOW_CONFIG_TASK_FILE_DEPENDENCY (
    FILE_ID              NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG_TASK_FILE(FILE_ID) ON DELETE CASCADE,
    PARENT_FILE_ID       NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG_TASK_FILE(FILE_ID) ON DELETE CASCADE,
    CREATED_BY           VARCHAR2(100) NOT NULL,
    CREATED_ON           TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT CHK_FILE_DEPENDENCY_SELF CHECK (FILE_ID != PARENT_FILE_ID),
    PRIMARY KEY (FILE_ID, PARENT_FILE_ID)
);

CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_FILE_DEPENDENCY_FILE ON WORKFLOW_CONFIG_TASK_FILE_DEPENDENCY(FILE_ID);
CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_FILE_DEPENDENCY_PARENT ON WORKFLOW_CONFIG_TASK_FILE_DEPENDENCY(PARENT_FILE_ID);

CREATE TABLE WORKFLOW_CONFIG_PARAM (
    PARAM_ID      NUMBER PRIMARY KEY,
    WORKFLOW_ID   NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG(WORKFLOW_ID) ON DELETE CASCADE,
    PARAM_KEY     VARCHAR2(100) NOT NULL,
    PARAM_VALUE   VARCHAR2(1000),
    CREATED_BY    VARCHAR2(100),
    CREATED_ON    TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_BY    VARCHAR2(100),
    UPDATED_ON    TIMESTAMP
);

CREATE TABLE TASK_DECISION_OUTCOME (
    OUTCOME_ID          NUMBER PRIMARY KEY,
    TASK_ID             NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG_TASK(TASK_ID) ON DELETE CASCADE,
    OUTCOME_NAME        VARCHAR2(100) NOT NULL,
    OUTCOME_DESCRIPTION VARCHAR2(500),
    NEXT_ACTION         VARCHAR2(100),  -- CONTINUE, REVISE, ESCALATE, etc.
    TARGET_TASK_ID      NUMBER,  -- Task to go to after this decision
    IS_ACTIVE           CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N')),
    CREATED_BY          VARCHAR2(100) NOT NULL,
    CREATED_ON          TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_BY          VARCHAR2(100),
    UPDATED_ON          TIMESTAMP
);

CREATE INDEX IDX_TASK_DECISION_TASK ON TASK_DECISION_OUTCOME(TASK_ID);

------------------------------------------------------------
-- CALENDAR LAYER
------------------------------------------------------------
CREATE TABLE WORKFLOW_CALENDAR (
    CALENDAR_ID     NUMBER PRIMARY KEY,
    CALENDAR_NAME   VARCHAR2(100) NOT NULL,
    DESCRIPTION     VARCHAR2(255),
    START_DATE      DATE NOT NULL,
    END_DATE        DATE NOT NULL,
    RECURRENCE      VARCHAR2(50),   -- NONE, DAILY, WEEKLY, MONTHLY, YEARLY
    CRON_EXPRESSION VARCHAR2(100),  -- Quartz cron expression for scheduling
    TIMEZONE        VARCHAR2(50),   -- Timezone for cron execution (e.g., "America/New_York")
    REGION          VARCHAR2(50),   -- Geographic region (e.g., "US", "EU", "APAC")
    OFFSET_DAYS     NUMBER,         -- Days to offset from the base date (can be negative)
    IS_ACTIVE       CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N')),  -- Whether calendar is active for scheduling
    CREATED_BY      VARCHAR2(100) NOT NULL,
    CREATED_AT      TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_BY      VARCHAR2(100),
    UPDATED_AT      TIMESTAMP
);

CREATE TABLE WORKFLOW_CALENDAR_DAYS (
    CALENDAR_DAY_ID NUMBER PRIMARY KEY,
    CALENDAR_ID     NUMBER NOT NULL,
    DAY_DATE        DATE NOT NULL,
    DAY_TYPE        VARCHAR2(20) CHECK (DAY_TYPE IN ('HOLIDAY','RUNDAY')),
    NOTE            VARCHAR2(255),

    CONSTRAINT FK_CALENDAR_DAYS_CAL
        FOREIGN KEY (CALENDAR_ID) REFERENCES WORKFLOW_CALENDAR(CALENDAR_ID)
);

CREATE INDEX IDX_CALENDAR_DAYS_CALENDAR ON WORKFLOW_CALENDAR_DAYS(CALENDAR_ID);
CREATE INDEX IDX_CALENDAR_DAYS_DATE ON WORKFLOW_CALENDAR_DAYS(DAY_DATE);

-- Additional indexes for WORKFLOW_CALENDAR
CREATE INDEX IDX_WORKFLOW_CALENDAR_CRON ON WORKFLOW_CALENDAR(CRON_EXPRESSION);
CREATE INDEX IDX_WORKFLOW_CALENDAR_TIMEZONE ON WORKFLOW_CALENDAR(TIMEZONE);
CREATE INDEX IDX_WORKFLOW_CALENDAR_REGION ON WORKFLOW_CALENDAR(REGION);
CREATE INDEX IDX_WORKFLOW_CALENDAR_ACTIVE ON WORKFLOW_CALENDAR(IS_ACTIVE);

------------------------------------------------------------
-- EXECUTION / RUNTIME LAYER
------------------------------------------------------------
CREATE TABLE WORKFLOW_INSTANCE (
    INSTANCE_ID     NUMBER PRIMARY KEY,
    WORKFLOW_ID     NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG(WORKFLOW_ID),
    STATUS          VARCHAR2(50) CHECK (STATUS IN ('PENDING','IN_PROGRESS','COMPLETED','FAILED','CANCELLED')),
    STARTED_BY      NUMBER REFERENCES WORKFLOW_USER(USER_ID),
    STARTED_ON      TIMESTAMP DEFAULT SYSTIMESTAMP,
    COMPLETED_ON    TIMESTAMP,
    ESCALATED_TO    NUMBER REFERENCES WORKFLOW_USER(USER_ID),
    CALENDAR_ID     NUMBER REFERENCES WORKFLOW_CALENDAR(CALENDAR_ID)
);

CREATE INDEX IDX_WORKFLOW_INSTANCE_WORKFLOW ON WORKFLOW_INSTANCE(WORKFLOW_ID);

CREATE TABLE WORKFLOW_INSTANCE_ROLE (
    ID            NUMBER PRIMARY KEY,
    INSTANCE_ID   NUMBER NOT NULL REFERENCES WORKFLOW_INSTANCE(INSTANCE_ID) ON DELETE CASCADE,
    ROLE_ID       NUMBER NOT NULL REFERENCES WORKFLOW_ROLE(ROLE_ID),
    USER_ID       NUMBER NOT NULL REFERENCES WORKFLOW_USER(USER_ID),
    IS_ACTIVE     CHAR(1) DEFAULT 'Y' CHECK (IS_ACTIVE IN ('Y','N'))
);

CREATE TABLE WORKFLOW_INSTANCE_TASK (
    INSTANCE_TASK_ID NUMBER PRIMARY KEY,
    INSTANCE_ID      NUMBER NOT NULL REFERENCES WORKFLOW_INSTANCE(INSTANCE_ID) ON DELETE CASCADE,
    TASK_ID          NUMBER NOT NULL REFERENCES WORKFLOW_CONFIG_TASK(TASK_ID),
    STATUS           VARCHAR2(50) CHECK (STATUS IN ('PENDING','IN_PROGRESS','COMPLETED','FAILED','ESCALATED','REJECTED')),
    ASSIGNED_TO      NUMBER REFERENCES WORKFLOW_USER(USER_ID),
    STARTED_ON       TIMESTAMP DEFAULT SYSTIMESTAMP,
    COMPLETED_ON     TIMESTAMP,
    REJECTED_ON      TIMESTAMP,
    REASON           VARCHAR2(500),  -- Generic reason/commentary for task status changes
    COMPLETED_BY     VARCHAR2(100),
    REJECTED_BY      VARCHAR2(100),
    DECISION_OUTCOME VARCHAR2(255),
    PARENT_TASK_IDS  VARCHAR2(500)  -- Comma-separated list of parent task IDs
);

CREATE INDEX IDX_WORKFLOW_INSTANCE_TASK_INSTANCE ON WORKFLOW_INSTANCE_TASK(INSTANCE_ID);

CREATE TABLE WORKFLOW_INSTANCE_TASK_FILE (
    INSTANCE_FILE_ID NUMBER,
    INSTANCE_TASK_ID NUMBER NOT NULL REFERENCES WORKFLOW_INSTANCE_TASK(INSTANCE_TASK_ID) ON DELETE CASCADE,
    VERSION          NUMBER NOT NULL DEFAULT 1,
    FILE_NAME        VARCHAR2(500),
    FILE_PATH        VARCHAR2(1000),
    FILE_LOCATION    VARCHAR2(1000),  -- Physical storage location (e.g., S3 bucket, local directory)
    FILE_TYPE_REGEX  VARCHAR2(100),   -- File type pattern (e.g., "*.*", "*.xls", "*.pdf")
    ACTION_TYPE      VARCHAR2(50) CHECK (ACTION_TYPE IN (
                             'UPLOAD','UPDATE','CONSOLIDATE')),
    FILE_DESCRIPTION VARCHAR2(500),
    IS_REQUIRED      CHAR(1) DEFAULT 'N' CHECK (IS_REQUIRED IN ('Y','N')),
    FILE_STATUS      VARCHAR2(50) DEFAULT 'PENDING' CHECK (FILE_STATUS IN ('PENDING','IN_PROGRESS','COMPLETED','REJECTED')),
    KEEP_FILE_VERSIONS CHAR(1) DEFAULT 'Y' CHECK (KEEP_FILE_VERSIONS IN ('Y','N')),
    RETAIN_FOR_CURRENT_PERIOD CHAR(1) DEFAULT 'Y' CHECK (RETAIN_FOR_CURRENT_PERIOD IN ('Y','N')),
    FILE_COMMENTARY  VARCHAR2(1000),  -- Additional comments about the file
    CREATED_BY       VARCHAR2(100),
    CREATED_AT       TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_BY       VARCHAR2(100),
    UPDATED_AT       TIMESTAMP,
    PRIMARY KEY (INSTANCE_FILE_ID, VERSION)
);

CREATE INDEX IDX_WORKFLOW_INSTANCE_TASK_FILE_TASK ON WORKFLOW_INSTANCE_TASK_FILE(INSTANCE_TASK_ID);
CREATE INDEX IDX_WORKFLOW_INSTANCE_TASK_FILE_VERSION ON WORKFLOW_INSTANCE_TASK_FILE(INSTANCE_FILE_ID, VERSION DESC);

CREATE TABLE WORKFLOW_INSTANCE_TASK_QUERY (
    QUERY_ID              NUMBER PRIMARY KEY,
    INSTANCE_TASK_ID      NUMBER NOT NULL REFERENCES WORKFLOW_INSTANCE_TASK(INSTANCE_TASK_ID) ON DELETE CASCADE,
    QUERY_TITLE           VARCHAR2(500) NOT NULL,
    QUERY_DESCRIPTION     VARCHAR2(2000),
    RAISED_BY_USER_ID     NUMBER NOT NULL,
    ASSIGNED_TO_USER_ID   NUMBER NOT NULL,
    QUERY_STATUS          VARCHAR2(50) DEFAULT 'OPEN' CHECK (QUERY_STATUS IN ('OPEN','IN_PROGRESS','RESOLVED','CLOSED')),
    PRIORITY              VARCHAR2(20) DEFAULT 'MEDIUM' CHECK (PRIORITY IN ('LOW','MEDIUM','HIGH','URGENT')),
    RESOLUTION_NOTES      VARCHAR2(2000),
    RESOLVED_BY_USER_ID   NUMBER,
    RESOLVED_AT           TIMESTAMP,
    CREATED_BY            VARCHAR2(100) NOT NULL,
    CREATED_AT            TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    UPDATED_BY            VARCHAR2(100),
    UPDATED_AT            TIMESTAMP
);

CREATE INDEX IDX_WORKFLOW_INSTANCE_TASK_QUERY_TASK ON WORKFLOW_INSTANCE_TASK_QUERY(INSTANCE_TASK_ID);
CREATE INDEX IDX_WORKFLOW_INSTANCE_TASK_QUERY_RAISED_BY ON WORKFLOW_INSTANCE_TASK_QUERY(RAISED_BY_USER_ID);
CREATE INDEX IDX_WORKFLOW_INSTANCE_TASK_QUERY_ASSIGNED_TO ON WORKFLOW_INSTANCE_TASK_QUERY(ASSIGNED_TO_USER_ID);
CREATE INDEX IDX_WORKFLOW_INSTANCE_TASK_QUERY_STATUS ON WORKFLOW_INSTANCE_TASK_QUERY(QUERY_STATUS);
CREATE INDEX IDX_WORKFLOW_INSTANCE_TASK_QUERY_PRIORITY ON WORKFLOW_INSTANCE_TASK_QUERY(PRIORITY);

CREATE TABLE TASK_INSTANCE_DECISION_OUTCOME (
    OUTCOME_ID            NUMBER PRIMARY KEY,
    INSTANCE_TASK_ID      NUMBER NOT NULL REFERENCES WORKFLOW_INSTANCE_TASK(INSTANCE_TASK_ID),
    OUTCOME_NAME          VARCHAR2(255) NOT NULL,
    OUTCOME_DESCRIPTION   VARCHAR2(500),
    NEXT_ACTION           VARCHAR2(100),  -- CONTINUE, REVISE, ESCALATE, etc.
    NEXT_INSTANCE_TASK_ID NUMBER REFERENCES WORKFLOW_INSTANCE_TASK(INSTANCE_TASK_ID),
    PRIOR_INSTANCE_TASK_ID NUMBER REFERENCES WORKFLOW_INSTANCE_TASK(INSTANCE_TASK_ID),
    CREATED_BY            VARCHAR2(100),
    CREATED_AT            TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE INDEX IDX_TASK_INSTANCE_DECISION ON TASK_INSTANCE_DECISION_OUTCOME(INSTANCE_TASK_ID);

------------------------------------------------------------
-- ADDITIONAL CONSTRAINTS AND INDEXES
------------------------------------------------------------

-- Additional constraints for WORKFLOW_CALENDAR
ALTER TABLE WORKFLOW_CALENDAR ADD CONSTRAINT CHK_CRON_EXPRESSION 
    CHECK (CRON_EXPRESSION IS NULL OR LENGTH(CRON_EXPRESSION) >= 5);

ALTER TABLE WORKFLOW_CALENDAR ADD CONSTRAINT CHK_TIMEZONE 
    CHECK (TIMEZONE IS NULL OR LENGTH(TIMEZONE) >= 3);

ALTER TABLE WORKFLOW_CALENDAR ADD CONSTRAINT CHK_REGION 
    CHECK (REGION IS NULL OR REGION IN ('US', 'EU', 'APAC', 'GLOBAL'));

ALTER TABLE WORKFLOW_CALENDAR ADD CONSTRAINT CHK_OFFSET_DAYS 
    CHECK (OFFSET_DAYS IS NULL OR OFFSET_DAYS BETWEEN -365 AND 365);

-- Additional indexes for performance
CREATE INDEX IDX_WORKFLOW_CONFIG_CALENDAR ON WORKFLOW_CONFIG(CALENDAR_ID);
CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_PARENT ON WORKFLOW_CONFIG_TASK(PARENT_TASK_IDS);
CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_PARALLEL ON WORKFLOW_CONFIG_TASK(PARALLEL_TASK_IDS);
CREATE INDEX IDX_WORKFLOW_CONFIG_TASK_FILE_TYPE ON WORKFLOW_CONFIG_TASK_FILE(FILE_TYPE_REGEX);

------------------------------------------------------------
-- AUDIT TABLES (with revision columns for Envers)
------------------------------------------------------------
-- Each audit table copies structure + adds REVISION_ID and REVISION_TYPE
CREATE TABLE WORKFLOW_USER_AUD AS SELECT * FROM WORKFLOW_USER WHERE 1=0;
ALTER TABLE WORKFLOW_USER_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_ROLE_AUD AS SELECT * FROM WORKFLOW_ROLE WHERE 1=0;
ALTER TABLE WORKFLOW_ROLE_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_CONFIG_AUD AS SELECT * FROM WORKFLOW_CONFIG WHERE 1=0;
ALTER TABLE WORKFLOW_CONFIG_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_CONFIG_ROLE_AUD AS SELECT * FROM WORKFLOW_CONFIG_ROLE WHERE 1=0;
ALTER TABLE WORKFLOW_CONFIG_ROLE_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_CONFIG_TASK_AUD AS SELECT * FROM WORKFLOW_CONFIG_TASK WHERE 1=0;
ALTER TABLE WORKFLOW_CONFIG_TASK_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_CONFIG_TASK_FILE_AUD AS SELECT * FROM WORKFLOW_CONFIG_TASK_FILE WHERE 1=0;
ALTER TABLE WORKFLOW_CONFIG_TASK_FILE_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_CONFIG_TASK_FILE_DEPENDENCY_AUD AS SELECT * FROM WORKFLOW_CONFIG_TASK_FILE_DEPENDENCY WHERE 1=0;
ALTER TABLE WORKFLOW_CONFIG_TASK_FILE_DEPENDENCY_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_CONFIG_PARAM_AUD AS SELECT * FROM WORKFLOW_CONFIG_PARAM WHERE 1=0;
ALTER TABLE WORKFLOW_CONFIG_PARAM_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE TASK_DECISION_OUTCOME_AUD AS SELECT * FROM TASK_DECISION_OUTCOME WHERE 1=0;
ALTER TABLE TASK_DECISION_OUTCOME_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_CALENDAR_AUD AS SELECT * FROM WORKFLOW_CALENDAR WHERE 1=0;
ALTER TABLE WORKFLOW_CALENDAR_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_CALENDAR_DAYS_AUD AS SELECT * FROM WORKFLOW_CALENDAR_DAYS WHERE 1=0;
ALTER TABLE WORKFLOW_CALENDAR_DAYS_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_INSTANCE_AUD AS SELECT * FROM WORKFLOW_CONFIG WHERE 1=0;
ALTER TABLE WORKFLOW_INSTANCE_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_INSTANCE_ROLE_AUD AS SELECT * FROM WORKFLOW_INSTANCE_ROLE WHERE 1=0;
ALTER TABLE WORKFLOW_INSTANCE_ROLE_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_INSTANCE_TASK_AUD AS SELECT * FROM WORKFLOW_INSTANCE_TASK WHERE 1=0;
ALTER TABLE WORKFLOW_INSTANCE_TASK_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE WORKFLOW_INSTANCE_TASK_FILE_AUD AS SELECT * FROM WORKFLOW_INSTANCE_TASK_FILE WHERE 1=0;
ALTER TABLE WORKFLOW_INSTANCE_TASK_FILE_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

CREATE TABLE TASK_INSTANCE_DECISION_OUTCOME_AUD AS SELECT * FROM TASK_INSTANCE_DECISION_OUTCOME WHERE 1=0;
ALTER TABLE TASK_INSTANCE_DECISION_OUTCOME_AUD ADD (REVISION_ID NUMBER, REVISION_TYPE CHAR(1));

------------------------------------------------------------
-- QUARTZ SCHEDULER TABLES
------------------------------------------------------------
-- Quartz tables for persistent job scheduling
CREATE TABLE QRTZ_JOB_DETAILS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250),
    JOB_CLASS_NAME VARCHAR(250) NOT NULL,
    IS_DURABLE VARCHAR(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR(1) NOT NULL,
    JOB_DATA BLOB,
    PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250),
    NEXT_FIRE_TIME BIGINT,
    PREV_FIRE_TIME BIGINT,
    PRIORITY INTEGER,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT,
    CALENDAR_NAME VARCHAR(200),
    MISFIRE_INSTR SMALLINT,
    JOB_DATA BLOB,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME, JOB_NAME, JOB_GROUP)
);

CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CRON_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_SIMPROP_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    STR_PROP_1 VARCHAR(512),
    STR_PROP_2 VARCHAR(512),
    STR_PROP_3 VARCHAR(512),
    INT_PROP_1 INT,
    INT_PROP_2 INT,
    LONG_PROP_1 BIGINT,
    LONG_PROP_2 BIGINT,
    DEC_PROP_1 NUMERIC(13,4),
    DEC_PROP_2 NUMERIC(13,4),
    BOOL_PROP_1 VARCHAR(1),
    BOOL_PROP_2 VARCHAR(1),
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_BLOB_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA BLOB,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_CALENDARS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    CALENDAR_NAME VARCHAR(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
);

CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
);

CREATE TABLE QRTZ_FIRED_TRIGGERS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    SCHED_TIME BIGINT NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200),
    JOB_GROUP VARCHAR(200),
    IS_NONCONCURRENT VARCHAR(1),
    REQUESTS_RECOVERY VARCHAR(1),
    PRIMARY KEY (SCHED_NAME, ENTRY_ID)
);

CREATE TABLE QRTZ_SCHEDULER_STATE (
    SCHED_NAME VARCHAR(120) NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL,
    PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
);

CREATE TABLE QRTZ_LOCKS (
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME VARCHAR(40) NOT NULL,
    PRIMARY KEY (SCHED_NAME, LOCK_NAME)
);

-- Indexes for better performance
CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME, REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME, JOB_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME, CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_STATE, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, INSTANCE_NAME, REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, JOB_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME, TRIGGER_GROUP);
